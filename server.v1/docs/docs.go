// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/favourites": {
            "post": {
                "description": "Adding Favorites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourite"
                ],
                "summary": "Adding Favorites",
                "operationId": "add-favourite",
                "parameters": [
                    {
                        "description": "Favorites data",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.FavouriteAddPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deleting a favorite movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourite"
                ],
                "summary": "Delete Favourite",
                "operationId": "delete-favourite",
                "parameters": [
                    {
                        "description": "Data for deleting favourite",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.FavouriteDeletePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/favourites/{uuid}": {
            "get": {
                "description": "Getting User Favourites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourite"
                ],
                "summary": "User Favourites",
                "operationId": "uuid-favourite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User favourites by UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Favourites"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/image/w500/{img}": {
            "get": {
                "description": "Getting a movie poster",
                "produces": [
                    "image/jpeg"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "movie poster",
                "operationId": "movie-poster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie poster",
                        "name": "img",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/monitoring": {
            "get": {
                "description": "Getting application monitoring - errors, average response time of the server and database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Monitoring app",
                "operationId": "admin-monitoring",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The key to access monitoring data",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MonitoringResponse"
                        }
                    },
                    "403": {
                        "description": "invalid key",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movie/{id}": {
            "get": {
                "description": "Getting movie details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "Movie Details",
                "operationId": "movie-details-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Movie"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "description": "Getting 10 movies based on different criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "movies by criteria",
                "operationId": "movie-criteria-10",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie genre",
                        "name": "genre_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The year of the film's release",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Movie Search",
                        "name": "s",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Movie"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/popular": {
            "get": {
                "description": "Getting 20 popular movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "Popular movies",
                "operationId": "movie-popular-20",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Movie"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/similar": {
            "get": {
                "description": "Getting similar movies based on data \u003c100",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "Related Movies",
                "operationId": "movie-similar-\u003c100",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The genre of the current movie",
                        "name": "genre_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The title of the current movie",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Description of the current movie",
                        "name": "overview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Movie"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recommendations": {
            "post": {
                "description": "Adding to recommendation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendation"
                ],
                "summary": "Adding to recommendation",
                "operationId": "add-recommendations",
                "parameters": [
                    {
                        "description": "data",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RecommendationAddPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recommendations/{uuid}": {
            "get": {
                "description": "Get recommendations user by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendation"
                ],
                "summary": "Get recommendations",
                "operationId": "get-recommendations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID user",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Movie"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/text/movies": {
            "post": {
                "description": "Getting 100 movie's based on a user's story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "A film based on the plot",
                "operationId": "movie-plot-100",
                "parameters": [
                    {
                        "description": "Data for movies plot",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.TextMoviePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Movie"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/add": {
            "post": {
                "description": "Adding user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Adding user",
                "operationId": "add-user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "description": "Updating user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updating user",
                "operationId": "update-user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "DTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/youtube/video": {
            "get": {
                "description": "Getting videos from YouTube is a maximum of 20",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "20 videos from YouTube",
                "operationId": "video-youtube-20",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video category",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Video Search",
                        "name": "s",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Video year",
                        "name": "y",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Video channel",
                        "name": "ch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.SearchResult"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/youtube/video/popular": {
            "get": {
                "description": "Getting 10 popular videos from YouTube",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "10 popular YouTube videos",
                "operationId": "video-popular-youtube-10",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.SearchResult"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.ErrorLog": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.FavouriteAddPayload": {
            "type": "object",
            "required": [
                "movieId",
                "moviePoster",
                "uuid"
            ],
            "properties": {
                "movieId": {
                    "type": "integer"
                },
                "moviePoster": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.FavouriteDeletePayload": {
            "type": "object",
            "required": [
                "movieId",
                "uuid"
            ],
            "properties": {
                "movieId": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.Favourites": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "movieId": {
                    "type": "integer"
                },
                "moviePoster": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.MonitoringResponse": {
            "type": "object",
            "properties": {
                "database": {
                    "type": "object",
                    "properties": {
                        "avg_latency_ms": {
                            "type": "number"
                        },
                        "errors": {
                            "type": "integer"
                        },
                        "total_queries": {
                            "type": "integer"
                        }
                    }
                },
                "last_errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ErrorLog"
                    }
                },
                "requests": {
                    "type": "object",
                    "properties": {
                        "avg_latency_ms": {
                            "type": "number"
                        },
                        "errors": {
                            "type": "integer"
                        },
                        "success_rate": {
                            "type": "number"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "types.Movie": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean"
                },
                "backdrop_path": {
                    "type": "string"
                },
                "genre_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "original_language": {
                    "type": "string"
                },
                "original_title": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "popularity": {
                    "type": "number"
                },
                "poster_path": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "video": {
                    "type": "boolean"
                },
                "vote_average": {
                    "type": "number"
                },
                "vote_count": {
                    "type": "integer"
                }
            }
        },
        "types.RecommendationAddPayload": {
            "type": "object",
            "required": [
                "genre",
                "title",
                "uuid"
            ],
            "properties": {
                "genre": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.ResourceId": {
            "type": "object",
            "properties": {
                "channelId": {
                    "description": "ChannelId: The ID that YouTube uses to uniquely identify the referred\nresource, if that resource is a channel. This property is only present if\nthe resourceId.kind value is youtube#channel.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind: The type of the API resource.",
                    "type": "string"
                },
                "playlistId": {
                    "description": "PlaylistId: The ID that YouTube uses to uniquely identify the referred\nresource, if that resource is a playlist. This property is only present if\nthe resourceId.kind value is youtube#playlist.",
                    "type": "string"
                },
                "videoId": {
                    "description": "VideoId: The ID that YouTube uses to uniquely identify the referred\nresource, if that resource is a video. This property is only present if the\nresourceId.kind value is youtube#video.",
                    "type": "string"
                }
            }
        },
        "types.SearchResult": {
            "type": "object",
            "properties": {
                "etag": {
                    "description": "Etag: Etag of this resource.",
                    "type": "string"
                },
                "id": {
                    "description": "Id: The id object contains information that can be used to uniquely identify\nthe resource that matches the search request.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ResourceId"
                        }
                    ]
                },
                "kind": {
                    "description": "Kind: Identifies what kind of resource this is. Value: the fixed string\n\"youtube#searchResult\".",
                    "type": "string"
                },
                "snippet": {
                    "description": "Snippet: The snippet object contains basic details about a search result,\nsuch as its title or description. For example, if the search result is a\nvideo, then the title will be the video's title and the description will be\nthe video's description.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SearchResultSnippet"
                        }
                    ]
                }
            }
        },
        "types.SearchResultSnippet": {
            "type": "object",
            "properties": {
                "channelId": {
                    "description": "ChannelId: The value that YouTube uses to uniquely identify the channel that\npublished the resource that the search result identifies.",
                    "type": "string"
                },
                "channelTitle": {
                    "description": "ChannelTitle: The title of the channel that published the resource that the\nsearch result identifies.",
                    "type": "string"
                },
                "description": {
                    "description": "Description: A description of the search result.",
                    "type": "string"
                },
                "liveBroadcastContent": {
                    "description": "LiveBroadcastContent: It indicates if the resource (video or channel) has\nupcoming/active live broadcast content. Or it's \"none\" if there is not any\nupcoming/active live broadcasts.\n\nPossible values:\n  \"none\"\n  \"upcoming\" - The live broadcast is upcoming.\n  \"live\" - The live broadcast is active.\n  \"completed\" - The live broadcast has been completed.",
                    "type": "string"
                },
                "publishedAt": {
                    "description": "PublishedAt: The creation date and time of the resource that the search\nresult identifies.",
                    "type": "string"
                },
                "thumbnails": {
                    "description": "Thumbnails: A map of thumbnail images associated with the search result. For\neach object in the map, the key is the name of the thumbnail image, and the\nvalue is an object that contains other information about the thumbnail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ThumbnailDetails"
                        }
                    ]
                },
                "title": {
                    "description": "Title: The title of the search result.",
                    "type": "string"
                }
            }
        },
        "types.TextMoviePayload": {
            "type": "object",
            "required": [
                "lege",
                "text",
                "uuid"
            ],
            "properties": {
                "lege": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.Thumbnail": {
            "type": "object",
            "properties": {
                "height": {
                    "description": "Height: (Optional) Height of the thumbnail image.",
                    "type": "integer"
                },
                "url": {
                    "description": "Url: The thumbnail image's URL.",
                    "type": "string"
                },
                "width": {
                    "description": "Width: (Optional) Width of the thumbnail image.",
                    "type": "integer"
                }
            }
        },
        "types.ThumbnailDetails": {
            "type": "object",
            "properties": {
                "default": {
                    "description": "Default: The default image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Thumbnail"
                        }
                    ]
                },
                "high": {
                    "description": "High: The high quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Thumbnail"
                        }
                    ]
                },
                "maxres": {
                    "description": "Maxres: The maximum resolution quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Thumbnail"
                        }
                    ]
                },
                "medium": {
                    "description": "Medium: The medium quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Thumbnail"
                        }
                    ]
                },
                "standard": {
                    "description": "Standard: The standard quality image for this resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Thumbnail"
                        }
                    ]
                }
            }
        },
        "types.User": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_upper": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "secret_word": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "username_upper": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "types.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "types.UserUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "secret_word": {
                    "type": "string"
                },
                "secret_word_old": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.2",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "flicksfi API",
	Description:      "API service for working with the flicksfi application for fast movie and video search. tg [https://t.me/flicksfi]",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
